- name: Print all host variables
  debug:
    var: hostvars[inventory_hostname]

- name: Check if at least one proxy is set when using proxy
  fail:
    msg: "use proxy, but no http_proxy,https_proxy or socks_proxy is defined."
  when: 
    - use_proxy
    - http_proxy is not defined
    - https_proxy is not defined
    - socks_proxy is not defined
  changed_when: false

- name: Check if mirror is set when using mirror
  fail:
    msg: "use mirror but mirror is not defined"
  when: use_mirror and mirror is not defined
  changed_when: false

- name: Get hostname
  shell: |
    hostname -s
  args:
    executable: /bin/bash
  register: hostname_rs
  changed_when: false

- name: Check if hostname matches RFC 1178
  fail:
    msg: "The hostname {{ hostname_rs }} does not match RFC 1178."
  when: hostname_rs.stdout is not match(rfc1178_regex)

- name: Read os family from /etc/os-release
  shell: |
    . /etc/os-release; echo $ID_LIKE
  args:
    executable: /bin/bash
  register: os_family_rs
  changed_when: false

- name: Set facts
  set_fact:
    use_proxy: "{{ (http_proxy is defined and (http_proxy | length > 0)) or (https_proxy is defined and (https_proxy | length > 0)) or (socks_proxy is defined and (socks_proxy | length > 0)) }}"
    use_mirror: "{{ (mirror is defined and (mirror | length > 0)) }}"
    os_family: "{{ os_family_rs.stdout }}"
    hostname: "{{ hostname_rs.stdout }}"

- include_role:
    name: proxy
  vars:
    no_proxy: "127.0.0.1,localhost,{{ groups['cluster_hosts'] | map('extract', hostvars, 'ansible_host') | join(',') }}"

- block:
  - name: Check SELinux status
    shell: getenforce
    register: selinux_rs

  - block:
    - name: Disable SELinux
      lineinfile:
        path: /etc/selinux/config
        regexp: '^SELINUX='
        line: 'SELINUX=disabled'
        state: present

    - name: Reboot the system
      reboot:
        reboot_timeout: 300
        msg: "Reboot initiated by Ansible to apply SELinux changes."

    - name: Wait for the system to start
      wait_for_connection:
        timeout: 600
        sleep: 10
        delay: 5
        connect_timeout: 5
      delegate_to: localhost
    when: selinux_rs.stdout == 'Enforcing'
  when: os_family  == "rhel fedora"

- name: Cleanup Kubernetes repo
  file:
    path: "{{ '/etc/apt/sources.list.d/kubernetes.list' if (os_family == 'debian') else '/etc/yum.repos.d/kubernetes.repo' }}"
    state: absent
  ignore_errors: yes
  when: use_mirror
