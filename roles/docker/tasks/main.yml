- name: Get docker version
  shell: |
    docker --version | awk '{print $3}' | cut -d ',' -f 1
  args:
    executable: /bin/bash
  register: docker_version_rs
  ignore_errors: yes

- name: Set fact for docker_version_matches
  set_fact:
    docker_version_matches: "{{ ( docker_version_rs.stdout_lines | length == 1 ) and ( docker_version_rs.stdout is version(docker_version, '>=') ) }}"
  when: docker_version_rs is success

- block:
  - include_role:
      name: common
      tasks_from: stop_service
    vars:
      service_name: "docker"
    when: docker_version_rs is success

  - name: Uninstall Docker
    package:
      name: "{{ docker_packages }}"
      state: absent
    when: docker_version_rs is success

  - name: Uninstall Docker conflict packages
    package:
      name: "{{ item }}"
      state: absent
    loop: "{{ docker_conflict_packages }}"
    ignore_errors: yes
    when: os_family == "rhel fedora"

  - name: Download docker install script
    get_url:
      url: "https://get.docker.com"
      dest: "/tmp/install-docker.sh"
      mode: '0755'
    register: download_docker_install_script_rs
    until: download_docker_install_script_rs is success
    retries: 3
    delay: 15

  - name: Install docker with downloaded install script
    shell: |
      /tmp/install-docker.sh \
      {% if use_mirror %}
        --mirror "{{ mirror }}" \
      {% endif %}
      --version "{{ docker_version }}"
    args:
      executable: /bin/bash
    register: docker_install_rs
    until: docker_install_rs is success
    retries: 3
    delay: 15

  - name: Add user {{ ansible_user }} to docker group
    user:
      name: "{{ ansible_user }}"
      groups: [ docker ]
      append: yes

  - include_role:
      name: common
      tasks_from: reset_connection
  when: docker_reset or ( not (docker_version_matches | default(false) ) )

- name: Check if {{ docker_daemon_json }} exists
  stat:
    path: "{{ docker_daemon_json }}"
  register: docker_daemon_rs

- block:
  - name: Ensure {{ docker_data_root }} directory exists
    file:
      path: "{{ docker_data_root }}"
      state: directory

  - name: Ensure {{ docker_daemon_json | dirname }} directory exists
    file:
      path: "{{ docker_daemon_json | dirname }}"
      state: directory

  - name: Ensure {{ docker_daemon_json }} file exists
    file:
      path: "{{ docker_daemon_json }}"
      state: touch
  when: not docker_daemon_rs.stat.exists

- name: Set fact for docker daemon config
  set_fact:
    docker_daemon_cfg:
      "data-root": "{{ docker_data_root }}"
      "registry-mirrors": "{{ docker_registry_mirrors }}"
      "exec-opts": ["native.cgroupdriver=systemd"]
      "bip": "{{ docker_bip }}"

- name: Read existing file content of {{ docker_daemon_json }}
  slurp:
    src: "{{ docker_daemon_json }}"
  register: existing_daemon_json

- name: Merge file content of {{ docker_daemon_json }}
  copy:
    content: "{{ existing_daemon_json['content'] | b64decode | default('{}', true) | from_json | combine(docker_daemon_cfg, recursive=True, list_merge='append') | to_nice_json }}"
    dest: "{{ docker_daemon_json }}"

- include_role:
    name: common
    tasks_from: proxy_service
  vars:
    service_name: "docker"

- include_role:
    name: common
    tasks_from: restart_service
  vars:
    service_name: "docker"